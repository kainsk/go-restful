// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product.sql

package repositories

import (
	"context"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
`

func (q *Queries) CountProducts(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(
    name
) VALUES (
    $1
) RETURNING id, name
`

func (q *Queries) CreateProduct(ctx context.Context, db DBTX, productName string) (Product, error) {
	row := db.QueryRowContext(ctx, createProduct, productName)
	var i Product
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, db DBTX, productID int64) error {
	_, err := db.ExecContext(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name FROM products
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, db DBTX, productID int64) (Product, error) {
	row := db.QueryRowContext(ctx, getProduct, productID)
	var i Product
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name FROM products
ORDER BY id
LIMIT $2
OFFSET $1
`

type ListProductsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListProducts(ctx context.Context, db DBTX, arg ListProductsParams) ([]Product, error) {
	rows, err := db.QueryContext(ctx, listProducts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateProductParams struct {
	NewProductName string `json:"new_product_name"`
	ProductID      int64  `json:"product_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, db DBTX, arg UpdateProductParams) (Product, error) {
	row := db.QueryRowContext(ctx, updateProduct, arg.NewProductName, arg.ProductID)
	var i Product
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
