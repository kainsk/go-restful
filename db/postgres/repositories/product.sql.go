// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: product.sql

package repositories

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(
    user_id,
    name,
    price
) VALUES (
    $1, $2, $3
) RETURNING id, name, price, user_id, created_at
`

type CreateProductParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
	Price  int64  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, db DBTX, arg CreateProductParams) (Product, error) {
	row := db.QueryRowContext(ctx, createProduct, arg.UserID, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProduct(ctx context.Context, db DBTX, id int64) (int64, error) {
	row := db.QueryRowContext(ctx, deleteProduct, id)
	err := row.Scan(&id)
	return id, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, price, user_id, created_at FROM products
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, db DBTX, id int64) (Product, error) {
	row := db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserProducts = `-- name: GetUserProducts :many
SELECT id, name, price, user_id, created_at
FROM products
WHERE user_id = $1 AND created_at < $2
ORDER BY created_at DESC
LIMIT $3
`

type GetUserProductsParams struct {
	UserID int64        `json:"user_id"`
	After  sql.NullTime `json:"after"`
	First  int32        `json:"first"`
}

func (q *Queries) GetUserProducts(ctx context.Context, db DBTX, arg GetUserProductsParams) ([]Product, error) {
	rows, err := db.QueryContext(ctx, getUserProducts, arg.UserID, arg.After, arg.First)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, price, user_id, created_at FROM products
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, db DBTX, arg ListProductsParams) ([]Product, error) {
	rows, err := db.QueryContext(ctx, listProducts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = $2,
    price = $3
WHERE id = $1
RETURNING id, name, price, user_id, created_at
`

type UpdateProductParams struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Price int64  `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, db DBTX, arg UpdateProductParams) (Product, error) {
	row := db.QueryRowContext(ctx, updateProduct, arg.ID, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const userProductsHasNextPage = `-- name: UserProductsHasNextPage :one
SELECT EXISTS(
    SELECT 1
    FROM products
    WHERE user_id = $1 AND created_at < $2
)
`

type UserProductsHasNextPageParams struct {
	UserID int64        `json:"user_id"`
	After  sql.NullTime `json:"after"`
}

func (q *Queries) UserProductsHasNextPage(ctx context.Context, db DBTX, arg UserProductsHasNextPageParams) (bool, error) {
	row := db.QueryRowContext(ctx, userProductsHasNextPage, arg.UserID, arg.After)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
